import torch
from ultralytics import YOLO
from yolov5 import val
import yaml
import os
import warnings
from PIL import Image
import glob

warnings.filterwarnings("ignore", message="pkg_resources is deprecated")


def verify_environment():
    """Проверка окружения и данных"""
    print(f"PyTorch version: {torch.__version__}")
    print(f"CUDA available: {torch.cuda.is_available()}")
    if torch.cuda.is_available():
        print(f"CUDA device: {torch.cuda.get_device_name(0)}")

    # Проверка data.yaml
    try:
        with open('data.yaml', 'r', encoding='utf-8') as f:
            data = yaml.safe_load(f)
            print("data.yaml contents:")
            print(data)

            for key in ['train', 'val']:
                path = os.path.abspath(data[key])
                exists = os.path.exists(path)
                print(f"{key} path exists ({path}): {exists}")
                if not exists:
                    raise FileNotFoundError(f"Path not found: {path}")

                # Проверка размеров нескольких изображений
                image_files = glob.glob(os.path.join(path, '*.jpg'))[:3]  # Проверяем первые 3 изображения
                for img_path in image_files:
                    with Image.open(img_path) as img:
                        print(f"Image {os.path.basename(img_path)} size: {img.size} (будет изменено на 640x640)")
    except Exception as e:
        print(f"Error loading data.yaml: {e}")
        raise


def train_model():
    """Конфигурация и запуск обучения YOLOv8"""
    config = {
        'data': os.path.abspath('data.yaml'),
        'epochs': 50,
        'batch': 4,
        'imgsz': 640,  # Все изображения будут изменены до 640x640
        'device': '0' if torch.cuda.is_available() else 'cpu',
        'name': 'pedestrian_detection',
        'single_cls': True,  # Только один класс ('person')
        'optimizer': 'AdamW',
        'patience': 15,
        'plots': False
    }

    try:
        # Загрузка модели (Nano версия)
        model = YOLO('yolov5s.pt')  # или 'yolov8n.yaml' для кастомной архитектуры

        print(f"\nНачинаем обучение с resize изображений до {config['imgsz']}x{config['imgsz']}...")

        # Обучение
        results = model.train(**config)

        # Валидация автоматически после обучения
        metrics = model.val()
        print(f"mAP50-95: {metrics.box.map:.4f}")

    except Exception as e:
        print(f"Training failed: {e}")
        raise


def val_model():
    val.run(
        weights='runs/train/pedestrian_detection9/weights/best.pt',
        data='data.yaml',
        imgsz=640,
        device='0' if torch.cuda.is_available() else 'cpu'
    )


if __name__ == '__main__':
    verify_environment()
    print("\nStarting training...")
    train_model()
    val_model()
