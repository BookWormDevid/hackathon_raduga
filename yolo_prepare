import os
import json
import shutil
from PIL import Image
from tqdm import tqdm

PATCH_SIZE = 640
INPUT_IMAGE_DIR = "images"
ANNOTATIONS_FILE = "annotations.json"
OUTPUT_DIR = "patch_dataset"
CLASS_NAMES = ["person"]

for subdir in ["images", "labels"]:
    os.makedirs(f"{OUTPUT_DIR}/{subdir}", exist_ok=True)

def convert_bbox(bbox, img_w, img_h):
    x_min, y_min, width, height = bbox
    x_max = x_min + width
    y_max = y_min + height
    x_center = (x_min + x_max) / 2.0 / img_w
    y_center = (y_min + y_max) / 2.0 / img_h
    bw = width / img_w
    bh = height / img_h
    return x_center, y_center, bw, bh

def bbox_inside_patch(bbox, px, py, patch_size):
    x_min, y_min, width, height = bbox
    x_max = x_min + width
    y_max = y_min + height
    return not (x_max <= px or x_min >= px + patch_size or y_max <= py or y_min >= py + patch_size)

def adjust_bbox_to_patch(bbox, px, py):
    x_min, y_min, width, height = bbox
    x_max = x_min + width
    y_max = y_min + height
    return [x_min - px, y_min - py, x_max - px, y_max - py]

with open(ANNOTATIONS_FILE) as f:
    data = json.load(f)

image_dict = {img["id"]: img for img in data["images"]}

annotations_per_image = {}
for ann in data["annotations"]:
    img_id = ann["image_id"]
    if img_id not in annotations_per_image:
        annotations_per_image[img_id] = []
    annotations_per_image[img_id].append(ann)

img_id = 0

for img_info in tqdm(data["images"], desc="Обработка изображений"):
    filename = img_info["file_name"]
    image_id = img_info["id"]
    img_path = os.path.join(INPUT_IMAGE_DIR, filename + ".jpg")

    if not os.path.exists(img_path):
        continue

    img = Image.open(img_path)
    img_w, img_h = img.size
    objects = annotations_per_image.get(image_id, [])

    for py in range(0, img_h, PATCH_SIZE):
        for px in range(0, img_w, PATCH_SIZE):
            patch = img.crop((px, py, px + PATCH_SIZE, py + PATCH_SIZE))
            patch_w, patch_h = patch.size

            patch_objects = []
            for obj in objects:
                bbox = obj["bbox"]
                if bbox_inside_patch(bbox, px, py, PATCH_SIZE):
                    adj_bbox = adjust_bbox_to_patch(bbox, px, py)
                    adj_bbox = [
                        max(0, min(PATCH_SIZE, adj_bbox[0])),
                        max(0, min(PATCH_SIZE, adj_bbox[1])),
                        max(0, min(PATCH_SIZE, adj_bbox[2])),
                        max(0, min(PATCH_SIZE, adj_bbox[3])),
                    ]
                    width = adj_bbox[2] - adj_bbox[0]
                    height = adj_bbox[3] - adj_bbox[1]
                    patch_objects.append((obj["category_id"], [adj_bbox[0], adj_bbox[1], width, height]))

            if not patch_objects:
                continue

            patch_filename = f"{img_id:06d}.jpg"
            label_filename = f"{img_id:06d}.txt"

            patch.save(os.path.join(OUTPUT_DIR, "images", patch_filename))

            with open(os.path.join(OUTPUT_DIR, "labels", label_filename), "w") as f:
                for class_id, bbox in patch_objects:
                    x, y, bw, bh = convert_bbox(bbox, patch_w, patch_h)
                    f.write(f"{class_id} {x:.6f} {y:.6f} {bw:.6f} {bh:.6f}\n")

            img_id += 1
